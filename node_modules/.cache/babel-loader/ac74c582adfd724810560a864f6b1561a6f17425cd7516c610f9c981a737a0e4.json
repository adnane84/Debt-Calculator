{"ast":null,"code":"// import React from \"react\";\n// import Entries from \"./Entries\";\n\n// class PaymentDue extends React.Component {\n//     constructor(props) {\n//         super(props)\n\n//         this.child = React.createRef()\n\n//         this.state={\n//             input:0,\n//             list: [],\n//             totalPaid:0,\n//             minPay:0,\n//             debtLeft:0,\n//             totalPayoff:0,\n//             isModal:false,\n\n//         }\n//     }\n\n//     handleChange= (e) => {\n//         this.setState({input:parseFloat(e.target.value)})\n//     }\n\n//     onClick=()=> {\n\n//         this.calcTotal()\n\n//         if (this.state.input.toFixed(2) === this.state.totalPayoff) {\n//             this.popUp();\n//         }\n//         else if (this.state.input > (this.state.totalPayoff)) {\n//             alert(`Your payment cannot be greater than the amount owed`)\n//         }\n//         else if (this.state.input >= (this.state.debtLeft)) {\n//             alert(`Your payment cannot be greater than your Remaining Debt. \n//             If you want to payoff your entire loan, you must pay off Remaining Debt + Interest + a 1% Principal Paymet.Current Payoff Total: $${this.state.totalPayoff} `)\n//         }\n//         else if (this.state.input >= (this.state.minPay.toFixed(2))){\n//         this.createLi();\n//         this.updatePay();\n//         this.child.current.calcDebt();\n//         }\n//         else{alert(`Payments must be greater than or equal to ${this.state.minPay.toFixed(2)}`)}\n//     }\n\n//     createLi = () => {\n//         let newItem = {\n//             label: this.state.input,\n//             id: Date.now(),\n//         }\n\n//         this.setState(prevState => ({\n//             list:[...prevState.list, newItem]\n//         }))\n//     }\n\n//     updatePay=() =>{\n//         this.setState({totalPaid: this.state.totalPaid + this.state.input\n//         })\n//     }\n//      getData=(minimumPay, debt, totalPayoff)=>{\n//          this.setState({\n//             minPay: minimumPay, \n//             debtLeft: debt.toFixed(2),\n//             totalPayoff: totalPayoff.toFixed(2)\n//         });\n//      }\n//      calcTotal = () => {\n//         let calcTotal = (this.state.debtLeft*1) + (this.state.minPay*1)\n//         this.setState({totalPayoff: calcTotal.toFixed(2)})\n//      }\n//      popUp = () => {\n//         this.setState({isModal:true,})\n//      }\n\n//      reset = () => {\n//         this.setState({\n//             input:0,\n//             list:[],\n//             totalPaid:0,\n//             minPay:0,\n//             debtLeft:0,\n//             totalPayoff:0,\n//             isModal:false,\n//         });\n\n//         this.child.current.reset();\n//      }\n//     render() {\n//         let {list, totalPaid, input, minPay, debtLeft, totalPayoff} = this.state;\n\n//         const modalVisible = this.state.isModal ? 'is-visible' : '' ;\n\n//         return(\n//         <header className=\"App-header\">  \n//             <div className={`modal ${modalVisible}`}> \n//             <h1>Congratulations! <br/>Your Loan is Paid Off!</h1>\n//             <button class='button' onClick={this.reset}>Reset</button>\n//             </div>  \n//             <div className='pay container'>\n\n//                 <h3>Payments</h3>\n//                 <input \n//                     type=\"number\"\n//                     step='0.01'\n//                     min={minPay.toFixed(2)}\n//                     max={debtLeft}\n//                     value={input}\n//                     placeholder='90'\n//                     onChange={this.handleChange}/>\n//                 <button className='button' onClick={this.onClick}>Log Payment</button>\n//                 <div className='subtext'>Minimum Payment : {minPay.toFixed(2)}</div>\n//                 <div className='subtext'>Loan Payoff Amount : {totalPayoff}</div>\n//                 <h3>Log</h3>\n//                 <ol className='log'>\n//                 {list.map((item) => <li key={item.id}>${item.label}</li>)}\n//                 </ol>\n//                 <h5>Total Amount Paid:</h5>\n//                 <span className='number-left'>{totalPaid.toFixed(2)}</span>\n//             </div>\n//             <Entries \n//             ref={this.child} \n//             payment ={input} \n//             childFunc = {this.childFunc}\n//             getData = {this.getData}/>\n//         </header>\n//         )\n//     }\n// }\n\n// export default PaymentDue;","map":{"version":3,"names":[],"sources":["/Users/adnaneabid/Desktop/react/DevslopesCalculatorReact/calculator/src/PaymentDue.jsx"],"sourcesContent":["// import React from \"react\";\n// import Entries from \"./Entries\";\n\n// class PaymentDue extends React.Component {\n//     constructor(props) {\n//         super(props)\n\n//         this.child = React.createRef()\n\n//         this.state={\n//             input:0,\n//             list: [],\n//             totalPaid:0,\n//             minPay:0,\n//             debtLeft:0,\n//             totalPayoff:0,\n//             isModal:false,\n            \n//         }\n//     }\n\n//     handleChange= (e) => {\n//         this.setState({input:parseFloat(e.target.value)})\n//     }\n\n//     onClick=()=> {\n\n//         this.calcTotal()\n\n//         if (this.state.input.toFixed(2) === this.state.totalPayoff) {\n//             this.popUp();\n//         }\n//         else if (this.state.input > (this.state.totalPayoff)) {\n//             alert(`Your payment cannot be greater than the amount owed`)\n//         }\n//         else if (this.state.input >= (this.state.debtLeft)) {\n//             alert(`Your payment cannot be greater than your Remaining Debt. \n//             If you want to payoff your entire loan, you must pay off Remaining Debt + Interest + a 1% Principal Paymet.Current Payoff Total: $${this.state.totalPayoff} `)\n//         }\n//         else if (this.state.input >= (this.state.minPay.toFixed(2))){\n//         this.createLi();\n//         this.updatePay();\n//         this.child.current.calcDebt();\n//         }\n//         else{alert(`Payments must be greater than or equal to ${this.state.minPay.toFixed(2)}`)}\n//     }\n\n   \n//     createLi = () => {\n//         let newItem = {\n//             label: this.state.input,\n//             id: Date.now(),\n//         }\n        \n//         this.setState(prevState => ({\n//             list:[...prevState.list, newItem]\n//         }))\n//     }\n\n//     updatePay=() =>{\n//         this.setState({totalPaid: this.state.totalPaid + this.state.input\n//         })\n//     }\n//      getData=(minimumPay, debt, totalPayoff)=>{\n//          this.setState({\n//             minPay: minimumPay, \n//             debtLeft: debt.toFixed(2),\n//             totalPayoff: totalPayoff.toFixed(2)\n//         });\n//      }\n//      calcTotal = () => {\n//         let calcTotal = (this.state.debtLeft*1) + (this.state.minPay*1)\n//         this.setState({totalPayoff: calcTotal.toFixed(2)})\n//      }\n//      popUp = () => {\n//         this.setState({isModal:true,})\n//      }\n    \n//      reset = () => {\n//         this.setState({\n//             input:0,\n//             list:[],\n//             totalPaid:0,\n//             minPay:0,\n//             debtLeft:0,\n//             totalPayoff:0,\n//             isModal:false,\n//         });\n\n//         this.child.current.reset();\n//      }\n//     render() {\n//         let {list, totalPaid, input, minPay, debtLeft, totalPayoff} = this.state;\n        \n//         const modalVisible = this.state.isModal ? 'is-visible' : '' ;\n\n//         return(\n//         <header className=\"App-header\">  \n//             <div className={`modal ${modalVisible}`}> \n//             <h1>Congratulations! <br/>Your Loan is Paid Off!</h1>\n//             <button class='button' onClick={this.reset}>Reset</button>\n//             </div>  \n//             <div className='pay container'>\n            \n//                 <h3>Payments</h3>\n//                 <input \n//                     type=\"number\"\n//                     step='0.01'\n//                     min={minPay.toFixed(2)}\n//                     max={debtLeft}\n//                     value={input}\n//                     placeholder='90'\n//                     onChange={this.handleChange}/>\n//                 <button className='button' onClick={this.onClick}>Log Payment</button>\n//                 <div className='subtext'>Minimum Payment : {minPay.toFixed(2)}</div>\n//                 <div className='subtext'>Loan Payoff Amount : {totalPayoff}</div>\n//                 <h3>Log</h3>\n//                 <ol className='log'>\n//                 {list.map((item) => <li key={item.id}>${item.label}</li>)}\n//                 </ol>\n//                 <h5>Total Amount Paid:</h5>\n//                 <span className='number-left'>{totalPaid.toFixed(2)}</span>\n//             </div>\n//             <Entries \n//             ref={this.child} \n//             payment ={input} \n//             childFunc = {this.childFunc}\n//             getData = {this.getData}/>\n//         </header>\n//         )\n//     }\n// }\n\n// export default PaymentDue;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
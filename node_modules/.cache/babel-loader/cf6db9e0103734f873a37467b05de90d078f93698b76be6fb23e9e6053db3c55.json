{"ast":null,"code":"import React from \"react\";\nclass Entries extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = e => {\n      this.setState({\n        [`${e.target.name}`]: e.target.value\n      });\n    };\n    this.dataFromInput = () => {\n      const {\n        debtInput,\n        interest\n      } = this.state;\n      let debt = debtInput * 1;\n      let monthlyIntPayment = interest * debt / 100 / 12;\n      let minPayment = monthlyIntPayment + debt * 0.01; //minTotalPay\n      let debtFree = minPayment + debt; //totalPayoff\n\n      this.setState({\n        newInterest: interest * debtInput / 100 / 12,\n        debtDue: debt * 1,\n        miniDue: minPayment,\n        remainingPayment: debt / minPayment\n      });\n      this.props.dataFromInput(minPayment, debt, debtFree);\n    };\n    this.computeDebt = () => {\n      if (this.state.remainingPayment > 100) {\n        const {\n          interest,\n          debtDue\n        } = this.state;\n        const {\n          payment\n        } = this.props;\n        let monthlyInt = interest / 100 / 12;\n        let monthlyIntPay = monthlyInt * debtDue;\n        let newMinPay = monthlyIntPay + debtDue * 0.01;\n        let principlePaid = payment - monthlyIntPay;\n        let newDebt = debtDue - principlePaid;\n        let debtFree = newMinPay + newDebt;\n        this.setState({\n          newInterest: monthlyInt * debtDue,\n          debtDue: newDebt * 1,\n          miniDue: newMiniDue,\n          remainingPayment: newDebt / principlePaid\n        });\n      }\n    };\n    this.state = {\n      debtInput: 0,\n      //debtInput\n      interest: 0,\n      //interestInput\n      newInterest: 0,\n      // monthlyInterest\n      debtDue: 0,\n      // remainingDebt\n      miniDue: 0,\n      // minPay\n      remainingPayment: 0\n    };\n  }\n}\nexport default Entries;","map":{"version":3,"names":["React","Entries","Component","constructor","props","handleChange","e","setState","target","name","value","dataFromInput","debtInput","interest","state","debt","monthlyIntPayment","minPayment","debtFree","newInterest","debtDue","miniDue","remainingPayment","computeDebt","payment","monthlyInt","monthlyIntPay","newMinPay","principlePaid","newDebt","newMiniDue"],"sources":["/Users/adnaneabid/Desktop/react/DevslopesCalculatorReact/calculator/src/Entries.jsx"],"sourcesContent":["import React from \"react\";\n\nclass Entries extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      debtInput: 0, //debtInput\n      interest: 0, //interestInput\n      newInterest: 0, // monthlyInterest\n      debtDue: 0, // remainingDebt\n      miniDue: 0, // minPay\n      remainingPayment: 0,\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ [`${e.target.name}`]: e.target.value });\n  };\n\n  dataFromInput = () => {\n    const { debtInput, interest } = this.state;\n    let debt = debtInput * 1;\n    let monthlyIntPayment = (interest * debt) / 100 / 12;\n    let minPayment = monthlyIntPayment + debt * 0.01; //minTotalPay\n    let debtFree = minPayment + debt; //totalPayoff\n\n    this.setState({\n      newInterest: (interest * debtInput) / 100 / 12,\n      debtDue: debt * 1,\n      miniDue: minPayment,\n      remainingPayment: debt / minPayment,\n    });\n\n    this.props.dataFromInput(minPayment, debt, debtFree);\n  };\n\n  computeDebt = () => {\n    if (this.state.remainingPayment > 100) {\n      const { interest, debtDue } = this.state;\n      const { payment } = this.props;\n\n      let monthlyInt = (interest / 100) / 12;\n      let monthlyIntPay = monthlyInt * debtDue;\n      let newMinPay = monthlyIntPay + debtDue * 0.01;\n      let principlePaid = payment - monthlyIntPay;\n      let newDebt = debtDue - principlePaid;\n      let debtFree = newMinPay + newDebt;\n\n      this.setState({\n        newInterest: monthlyInt * debtDue,\n        debtDue: newDebt * 1,\n        miniDue: newMiniDue,\n        remainingPayment: newDebt / principlePaid,\n      })\n    }\n\n   \n  };\n}\n\nexport default Entries;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,SAASD,KAAK,CAACE,SAAS,CAAC;EACpCC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAWfC,YAAY,GAAIC,CAAC,IAAK;MACpB,IAAI,CAACC,QAAQ,CAAC;QAAE,CAAE,GAAED,CAAC,CAACE,MAAM,CAACC,IAAK,EAAC,GAAGH,CAAC,CAACE,MAAM,CAACE;MAAM,CAAC,CAAC;IACzD,CAAC;IAAA,KAEDC,aAAa,GAAG,MAAM;MACpB,MAAM;QAAEC,SAAS;QAAEC;MAAS,CAAC,GAAG,IAAI,CAACC,KAAK;MAC1C,IAAIC,IAAI,GAAGH,SAAS,GAAG,CAAC;MACxB,IAAII,iBAAiB,GAAIH,QAAQ,GAAGE,IAAI,GAAI,GAAG,GAAG,EAAE;MACpD,IAAIE,UAAU,GAAGD,iBAAiB,GAAGD,IAAI,GAAG,IAAI,CAAC,CAAC;MAClD,IAAIG,QAAQ,GAAGD,UAAU,GAAGF,IAAI,CAAC,CAAC;;MAElC,IAAI,CAACR,QAAQ,CAAC;QACZY,WAAW,EAAGN,QAAQ,GAAGD,SAAS,GAAI,GAAG,GAAG,EAAE;QAC9CQ,OAAO,EAAEL,IAAI,GAAG,CAAC;QACjBM,OAAO,EAAEJ,UAAU;QACnBK,gBAAgB,EAAEP,IAAI,GAAGE;MAC3B,CAAC,CAAC;MAEF,IAAI,CAACb,KAAK,CAACO,aAAa,CAACM,UAAU,EAAEF,IAAI,EAAEG,QAAQ,CAAC;IACtD,CAAC;IAAA,KAEDK,WAAW,GAAG,MAAM;MAClB,IAAI,IAAI,CAACT,KAAK,CAACQ,gBAAgB,GAAG,GAAG,EAAE;QACrC,MAAM;UAAET,QAAQ;UAAEO;QAAQ,CAAC,GAAG,IAAI,CAACN,KAAK;QACxC,MAAM;UAAEU;QAAQ,CAAC,GAAG,IAAI,CAACpB,KAAK;QAE9B,IAAIqB,UAAU,GAAIZ,QAAQ,GAAG,GAAG,GAAI,EAAE;QACtC,IAAIa,aAAa,GAAGD,UAAU,GAAGL,OAAO;QACxC,IAAIO,SAAS,GAAGD,aAAa,GAAGN,OAAO,GAAG,IAAI;QAC9C,IAAIQ,aAAa,GAAGJ,OAAO,GAAGE,aAAa;QAC3C,IAAIG,OAAO,GAAGT,OAAO,GAAGQ,aAAa;QACrC,IAAIV,QAAQ,GAAGS,SAAS,GAAGE,OAAO;QAElC,IAAI,CAACtB,QAAQ,CAAC;UACZY,WAAW,EAAEM,UAAU,GAAGL,OAAO;UACjCA,OAAO,EAAES,OAAO,GAAG,CAAC;UACpBR,OAAO,EAAES,UAAU;UACnBR,gBAAgB,EAAEO,OAAO,GAAGD;QAC9B,CAAC,CAAC;MACJ;IAGF,CAAC;IApDC,IAAI,CAACd,KAAK,GAAG;MACXF,SAAS,EAAE,CAAC;MAAE;MACdC,QAAQ,EAAE,CAAC;MAAE;MACbM,WAAW,EAAE,CAAC;MAAE;MAChBC,OAAO,EAAE,CAAC;MAAE;MACZC,OAAO,EAAE,CAAC;MAAE;MACZC,gBAAgB,EAAE;IACpB,CAAC;EACH;AA6CF;AAEA,eAAerB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}